// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/Nahom-Derese/Learning_Go/Task-8/task-manager/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserUsecase) CreateUser(user domain.User) (domain.UserRes, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 domain.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (domain.UserRes, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) domain.UserRes); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(domain.UserRes)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: username
func (_m *UserUsecase) Delete(username string) error {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields:
func (_m *UserUsecase) DeleteAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *UserUsecase) FindAll() []domain.UserRes {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.UserRes
	if rf, ok := ret.Get(0).(func() []domain.UserRes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserRes)
		}
	}

	return r0
}

// FindByUsername provides a mock function with given fields: username
func (_m *UserUsecase) FindByUsername(username string) (domain.UserRes, bool) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 domain.UserRes
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (domain.UserRes, bool)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) domain.UserRes); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(domain.UserRes)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// FindUser provides a mock function with given fields: id
func (_m *UserUsecase) FindUser(id string) (domain.UserRes, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindUser")
	}

	var r0 domain.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.UserRes, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.UserRes); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.UserRes)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByUsername provides a mock function with given fields: username
func (_m *UserUsecase) FindUserByUsername(username string) (domain.UserRes, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByUsername")
	}

	var r0 domain.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.UserRes, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) domain.UserRes); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(domain.UserRes)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: username, password
func (_m *UserUsecase) Login(username string, password string) (string, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromoteUser provides a mock function with given fields: username
func (_m *UserUsecase) PromoteUser(username string) (domain.UserRes, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 domain.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.UserRes, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) domain.UserRes); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(domain.UserRes)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: username, password
func (_m *UserUsecase) Signup(username string, password string) (domain.UserRes, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 domain.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.UserRes, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.UserRes); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(domain.UserRes)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: username, user
func (_m *UserUsecase) Update(username string, user domain.UserRes) (domain.UserRes, error) {
	ret := _m.Called(username, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.UserRes) (domain.UserRes, error)); ok {
		return rf(username, user)
	}
	if rf, ok := ret.Get(0).(func(string, domain.UserRes) domain.UserRes); ok {
		r0 = rf(username, user)
	} else {
		r0 = ret.Get(0).(domain.UserRes)
	}

	if rf, ok := ret.Get(1).(func(string, domain.UserRes) error); ok {
		r1 = rf(username, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
